input {

  file {
    path => "/U01/app/congphim/cms_wap/logs/log_device.log*"
    start_position => "beginning"
    type=>"log-device"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
  }
  
#  file {
#    path => "/u01/app/congphim/cms_wap/logs/log_vod.log*"
#    start_position => "beginning"
#    type=>"log-vod"
#    stat_interval=>30
#    discover_interval=>30
#    max_open_files=>500
#    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
#  }  

  file {
    path => "/U01/app/congphim/cms_wap/logs/view.log*"
    start_position => "beginning"
    type=>"view"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
  }

}

filter {

  if [type] == "log-device" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:created_at}%{SPACE}\[%{IPV4:remote_addr}\]%{GREEDYDATA:temp}LOG_DEVICE\|%{DATA:session_id}\|(%{DATA:msisdn})?\|%{DATA:user_id}\|%{DATA:source}\|%{DATA:profile_id}\|%{GREEDYDATA:user_agent}" }
    }
    mutate {
      convert => { "profile_id" => "integer" }
      remove_field => ["temp", "path", "message"]
      replace => { "host" => "WAP98" }
    }
    date {
      match => ["created_at", "yyyy-MM-dd HH:mm:ss" ]
      target => "insert_time"
    }
    if "_grokparsefailure" in [tags] {
      drop {}
    } 
  }

#  if [type] == "log-vod" {
#	grok {
#		match => { "message" => "%{TIMESTAMP_ISO8601:created_at}%{SPACE}\[%{IPV4:remote_addr}\]%{GREEDYDATA:temp}LOG_VOD\|%{DATA:content_type}\|%{DATA:content_id}\|%{DATA:profile_id}\|(%{DATA:msisdn})?\|(%{DATA:user_id})?" }
#   match => { "message" => "%{TIMESTAMP_ISO8601:created_at}%{SPACE}\[%{IPV4:remote_addr}\]%{GREEDYDATA:temp}LOG_VOD\|%{DATA:content_type}\|%{DATA:content_id}\|%{DATA:profile_id}\|(%{DATA:msisdn})?\|(%{DATA:user_id})?\|(%{DATA:name})?\|(%{GREEDYDATA:url})?" }
#	}
#	mutate {
#		convert => { "profile_id" => "integer" }
#		remove_field => ["temp", "path", "message", "temp"]
#		replace => { "host" => "WAP98" }
#	}
#	date {
#		match => ["created_at", "yyyy-MM-dd HH:mm:ss" ]
#		target => "insert_time"
#	}
#        if "_grokparsefailure" in [tags] {
#                drop {}
#        } 
#
#  }


  if [type] == "view" {
        grok {
                match => { "message" => "%{TIMESTAMP_ISO8601:created_at}%{SPACE}\[%{IPV4:remote_addr}\]%{GREEDYDATA:temp}\[view\]%{SPACE}(%{DATA:msisdn})?\|(%{DATA:user_id})?\|(%{DATA:content_id})?\|(%{NUMBER:raw_time})\|(%{NUMBER:profile_id})" }
        }
        mutate {
                convert => { "profile_id" => "integer" }
                remove_field => ["temp", "path", "message", "temp"]
                replace => { "host" => "WAP98" }
                replace => { "name" => "" }
                replace => { "url" => "" }
				
        }
        date {
                match => ["created_at", "yyyy-MM-dd HH:mm:ss" ]
                target => "insert_time"
        }
        if "_grokparsefailure" in [tags] {
                drop {}
        }

  }
}


output {
#	stdout {
#	    codec => rubydebug
#	}
	if [type] == "log-device" {
	    elasticsearch {
			hosts => ["10.60.98.148:8500"] 
			index => "filmportal-log-device"
		}
	}

	if [type] == "view" {
		elasticsearch {
			hosts => ["10.60.98.148:8500"]
			index => "filmportal-log-vod"
		}
	}

}
