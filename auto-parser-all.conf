input {
  file {
    path => "D:/VideoJS/ELK/log-manage.1.2/cron_tasks/kenh-hai/first-load/*.txt"
    start_position => "beginning"
    type=>"first_load"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 1000

  }
  file {
    path => "D:/VideoJS/ELK/log-manage.1.2/cron_tasks/kenh-hai/error/*.txt"
    start_position => "beginning"
    type=>"error"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 1000
  }
  file {
    path => "D:/VideoJS/ELK/log-manage.1.2/cron_tasks/kenh-hai/percentile/*.txt"
    start_position => "beginning"
    type=>"percentile"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 1000
  }
  file {
    path => "D:/VideoJS/ELK/log-manage.1.2/cron_tasks/kenh-hai/seek/*.txt"
    start_position => "beginning"
    type=>"seek"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 1000
  }
  file {
    path => "D:/VideoJS/ELK/log-manage.1.2/cron_tasks/kenh-hai/buffered/*.txt"
    start_position => "beginning"
    type=>"buffered"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 1000
  }
  file {
    path => "D:/VideoJS/ELK/log-manage.1.2/cron_tasks/kenh-hai/performance/*.txt"
    start_position => "beginning"
    type=>"performance"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 1000
  }
  file {
    path => "D:/VideoJS/ELK/log-manage.1.2/cron_tasks/kenh-hai/quality/*.txt"
    start_position => "beginning"
    type=>"quality"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>500
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 1000
  }
}
filter {
    if [type] == "first_load" {
        grok {
            match => { "message" => "%{WORD:service_token} %{WORD:user_id} %{URIPATH:current_uri} %{IP:ip_public} %{IP:ip_private} %{NUMBER:secondsToLoad} %{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}[T ]%{HOUR:hour}:?%{MINUTE:minute}(?::?%{SECOND:second})?%{ISO8601_TIMEZONE:timezone}? %{QS:http_user_agent} %{NUMBER:media_id} %{QS:media_name} %{WORD:media_category} %{NUMBER:media_like_count} %{NUMBER:media_viewed} %{NUMBER:media_duration}" }
        }
        mutate {
            convert => {
            "secondsToLoad" => "float"
            "media_id" => "integer"
            "media_like_count" => "integer"
            "media_viewed" => "integer"
            "media_duration" => "integer"
            }
        }
        geoip {
            source => "ip_public"
            target => "geoip"
            add_tag => [ "client-geoip" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
        }
        useragent {
            source => "http_user_agent"
        }
        if "_grokparsefailure" in [tags] {
            drop {}
        }
    }
    if [type] == "error" {
        grok {
            match => { "message" => "%{WORD:service_token} %{WORD:user_id} %{URIPATH:current_uri} %{IP:ip_public} %{IP:ip_private} %{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}[T ]%{HOUR:hour}:?%{MINUTE:minute}(?::?%{SECOND:second})?%{ISO8601_TIMEZONE:timezone}? %{NUMBER:error_code} %{WORD:error_type} %{QS:error_message} %{QS:http_user_agent} %{NUMBER:media_id} %{QS:media_name} %{WORD:media_category} %{NUMBER:media_like_count} %{NUMBER:media_viewed} %{NUMBER:media_duration}" }
        }
        mutate {
            convert => {
            "error_code" => "integer"
            "media_id" => "integer"
            "media_like_count" => "integer"
            "media_viewed" => "integer"
            "media_duration" => "integer"
            }
        }
        geoip {
            source => "ip_public"
            target => "geoip"
            add_tag => [ "client-geoip" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
        }
        useragent {
            source => "http_user_agent"
        }
        if "_grokparsefailure" in [tags] {
            drop {}
        }
    }
    if [type] == "percentile" {
        grok {
            match => { "message" => "%{WORD:service_token} %{WORD:user_id} %{URIPATH:current_uri} %{IP:ip_public} %{IP:ip_private} %{NUMBER:seekCount} %{NUMBER:pauseCount} %{NUMBER:currentTime} %{NUMBER:duration} %{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}[T ]%{HOUR:hour}:?%{MINUTE:minute}(?::?%{SECOND:second})?%{ISO8601_TIMEZONE:timezone}? %{QS:http_user_agent} %{NUMBER:media_id} %{QS:media_name} %{WORD:media_category} %{NUMBER:media_like_count} %{NUMBER:media_viewed} %{NUMBER:media_duration} %{WORD:quarter}" }
        }
        mutate {
            convert => {
            "seekCount" => "integer"
            "pauseCount" => "integer"
            "currentTime" => "integer"
            "duration" => "integer"
            "media_id" => "integer"
            "media_like_count" => "integer"
            "media_viewed" => "integer"
            "media_duration" => "integer"
            }
        }
        geoip {
            source => "ip_public"
            target => "geoip"
            add_tag => [ "client-geoip" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
        }
        useragent {
            source => "http_user_agent"
        }
        if "_grokparsefailure" in [tags] {
            drop {}
        }
    }
    if [type] == "seek" {
        grok {
            match => { "message" => "%{WORD:service_token} %{WORD:user_id} %{URIPATH:current_uri} %{IP:ip_public} %{IP:ip_private} %{NUMBER:seekCount} %{NUMBER:seekTo} %{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}[T ]%{HOUR:hour}:?%{MINUTE:minute}(?::?%{SECOND:second})?%{ISO8601_TIMEZONE:timezone}? %{QS:http_user_agent} %{NUMBER:media_id} %{QS:media_name} %{WORD:media_category} %{NUMBER:media_like_count} %{NUMBER:media_viewed} %{NUMBER:media_duration}" }
        }
        mutate {
            convert => {
            "seekCount" => "integer"
            "seekTo" => "integer"
            "media_id" => "integer"
            "media_like_count" => "integer"
            "media_viewed" => "integer"
            "media_duration" => "integer"
            }
        }
        geoip {
            source => "ip_public"
            target => "geoip"
            add_tag => [ "client-geoip" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
        }
        useragent {
            source => "http_user_agent"
        }
        if "_grokparsefailure" in [tags] {
            drop {}
        }
    }
    if [type] == "buffered" {
        grok {
            match => { "message" => "%{WORD:service_token} %{WORD:user_id} %{URIPATH:current_uri} %{IP:ip_public} %{IP:ip_private} %{NUMBER:currentTime} %{NUMBER:readyState} %{NUMBER:secondsToLoad} %{NUMBER:bufferCount} %{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}[T ]%{HOUR:hour}:?%{MINUTE:minute}(?::?%{SECOND:second})?%{ISO8601_TIMEZONE:timezone}? %{QS:http_user_agent} %{NUMBER:media_id} %{QS:media_name} %{WORD:media_category} %{NUMBER:media_like_count} %{NUMBER:media_viewed} %{NUMBER:media_duration}" }
        }
        mutate {
            convert => {
            "currentTime" => "integer"
            "readyState" => "integer"
            "secondsToLoad" => "float"
            "bufferCount" => "integer"
            "media_id" => "integer"
            "media_like_count" => "integer"
            "media_viewed" => "integer"
            "media_duration" => "integer"
            }
        }
        geoip {
            source => "ip_public"
            target => "geoip"
            add_tag => [ "client-geoip" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
        }
        useragent {
            source => "http_user_agent"
        }
        if "_grokparsefailure" in [tags] {
            drop {}
        }
    }
    if [type] == "performance" {
        grok {
            match => { "message" => "%{WORD:service_token} %{WORD:user_id} %{URIPATH:current_uri} %{IP:ip_public} %{IP:ip_private} %{NUMBER:pauseCount} %{NUMBER:seekCount} %{NUMBER:bufferCount} %{NUMBER:totalDuration} %{NUMBER:watchedDuration} %{NUMBER:bufferDuration} %{NUMBER:initialLoadTime} %{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}[T ]%{HOUR:hour}:?%{MINUTE:minute}(?::?%{SECOND:second})?%{ISO8601_TIMEZONE:timezone}? %{QS:http_user_agent} %{NUMBER:media_id} %{QS:media_name} %{WORD:media_category} %{NUMBER:media_like_count} %{NUMBER:media_viewed} %{NUMBER:media_duration}" }
        }
        mutate {
            convert => {
            "pauseCount" => "integer"
            "seekCount" => "integer"
            "bufferCount" => "integer"
            "totalDuration" => "integer"
            "watchedDuration" => "integer"
            "bufferDuration" => "float"
            "initialLoadTime" => "float"
            "media_id" => "integer"
            "media_like_count" => "integer"
            "media_viewed" => "integer"
            "media_duration" => "integer"
            }
        }
        geoip {
            source => "ip_public"
            target => "geoip"
            add_tag => [ "client-geoip" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
        date {
            match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
        }
        useragent {
            source => "http_user_agent"
        }
        if "_grokparsefailure" in [tags] {
            drop {}
        }
    }
    if [type] == "quality" {

    }
}

output {

    if [type] == "first_load" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"] 
            index => "v1-first-load-event-logs"
        }
    }
    if [type] == "error" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"] 
            index => "v1-error-event-logs"
        }
    }
    if [type] == "percentile" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"] 
            index => "v1-percentile-event-logs"
        }
    }
    if [type] == "seek" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"] 
            index => "v1-seek-event-logs"
        }
    }
    if [type] == "buffered" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"] 
            index => "v1-buffered-event-logs"
        }
    }
    if [type] == "performance" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"] 
            index => "v1-performance-event-logs"
        }
    }
}
